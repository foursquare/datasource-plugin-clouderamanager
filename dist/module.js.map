{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright 2015 Foursquare Labs, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// This file has been modified as part of migrating to React for compatibility with Grafana 9.\n// Modifications copyright (c) 2023 Cloudera, Inc.\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings, FieldType, MutableDataFrame\n} from '@grafana/data';\n\nimport {ClouderaManagerQuery, ClouderaManagerDataSourceOptions} from './types';\nimport {BackendSrvRequest, getBackendSrv, getTemplateSrv} from '@grafana/runtime';\nimport {lastValueFrom} from 'rxjs';\n\nexport class ClouderaManagerDataSource extends DataSourceApi<ClouderaManagerQuery, ClouderaManagerDataSourceOptions> {\n\n  url?: string;\n  basicAuth?: string;\n  apiVersion: number;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<ClouderaManagerDataSourceOptions>) {\n    super(instanceSettings);\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.apiVersion = 4;\n    if (instanceSettings.jsonData.cmApiVersion === 'v6-10') {\n      this.apiVersion = 6;\n    } else if (instanceSettings.jsonData.cmApiVersion === 'v11+') {\n      this.apiVersion = 11;\n    }\n  }\n\n  // Query for metric targets within the specified time range.\n  query(options: DataQueryRequest<ClouderaManagerQuery>): Promise<DataQueryResponse> {\n    const {range} = options;\n    const dataPromises = options.targets\n      .filter(function (target) {\n        return target.queryText && !target.hide;\n      })\n      .map((target) => {\n        let url = '/api/v' + this.apiVersion + '/timeseries';\n        let query = {\n          query: getTemplateSrv().replace(target.queryText, options.scopedVars),\n          from: range!.from.toISOString(),\n          to: range!.to.toISOString(),\n          contentType: \"application/json\",\n        };\n        let requestOptions;\n        if (this.apiVersion >= 11) {\n          // Use POST method on API versions 11 and higher\n          // Parameters are passed via the body. This allows longer `tsquery` queries.\n          requestOptions = {\n            method: 'POST',\n            url: url,\n            data: query\n          };\n        } else {\n          // Use GET method for API versions prior to 11\n          // Parameters are passed via query string.\n          requestOptions = {\n            method: 'GET',\n            url: url,\n            params: query\n          };\n        }\n\n        const result = this.doRequest(requestOptions).then((response: any) => {\n          if (!response || !response.data || !response.data.items) {\n            return [];\n          }\n          const convertResponse = this.convertResponse(response);\n          return convertResponse;\n        });\n\n        return result;\n      });\n\n    return Promise.all(dataPromises.values()).then((response) => {\n      const frames = ([] as DataFrame[]).concat(...response);\n      return {data: frames};\n    });\n  }\n\n  // Test the connection to Cloudera Manager by querying for the supported API version.\n  async testDatasource() {\n    let options = {\n      url: '/api/version',\n    }\n\n    return this.doRequest(options).then((response) => {\n      //handling errors for the undefined response received\n      if(response === undefined){\n        return {\n          status: \"error\",\n          message: \"Data source returned an undefined response\",\n          title: \"Error\"\n        }\n      }\n\n      // ensuring that the response matches the pattern `^v\\d+`\n      let pattern = /^v\\d+/;\n      let data: string = (response.data as string);\n      if(!(response.ok) || !(pattern.test(data))){\n        return {\n          status: \"error\",\n          message: response.data,\n          title: \"Error\"\n        }\n      }\n\n      return {\n        status: \"success\",\n        message: \"Data source is working. API version is '\" + response.data + \"'.\",\n        title: \"Success\"\n      };\n    });\n  }\n\n  // Helper to make API requests to Cloudera Manager. To avoid CORS issues, the requests may be proxied\n  // through Grafana's backend via `getBackendSrv().fetch().\n  async doRequest(options: BackendSrvRequest) {\n    options.url = this.url + options.url;\n    options.method = options.method || 'GET';\n    if (this.basicAuth) {\n      options.headers = {\n        \"Authorization\": this.basicAuth\n      };\n    }\n    const result = getBackendSrv().fetch(options);\n    let response;\n    try {\n      response = await lastValueFrom(result);\n    } catch(e) {\n      // Grafana <= 8.1 uses rxjs 6. Which doesn't support lastValueFrom, and throws an Error.\n      // It could be replaced by toPromise.\n      response = result.toPromise();\n    }\n    return response;\n  }\n\n  // Convert the metadata returned from Cloudera Manager into the TimeSeries name for Grafana.\n  makeTimeSeriesName(metadata: any): string {\n    // metadata.alias contains the alias provided in query\n    if (metadata.alias) {\n      let alias = metadata.alias;\n      if (metadata.metricName) {\n        alias = alias.replace('%metricName%', metadata.metricName);\n      }\n      if (metadata.entityName) {\n        alias = alias.replace('%entityName%', metadata.entityName);\n      }\n      return alias;\n    } else if (metadata.metricName && metadata.entityName) {\n      return metadata.metricName + ' (' + metadata.entityName + ')';\n    } else if (metadata.metricName) {\n      return metadata.metricName;\n    } else if (metadata.entityName) {\n      return metadata.entityName;\n    }\n    return 'UNKNOWN NAME';\n  }\n\n  // Convert the Cloudera Manager response to the format expected by Grafana.\n  //\n  // Grafana generally expects:\n  // { data:\n  //    [\n  //      { name: 'metricName1',\n  //        fields: [\n  //          // interface Field<T = any, V = Vector<T>>\n  //          { name: \"Time\",\n  //            type: FieldType.time,\n  //            values: [ts-a1, ts-a2, ts-a3]\n  //          }\n  //          { name: \"Value\",\n  //            type: FieldType.number,\n  //            values: [a1, a2, a3]\n  //          }\n  //        ]\n  //       },\n  //      { name: 'metricName2',\n  //        fields: [\n  //          { name: \"Time\",\n  //            type: FieldType.time,\n  //            values: [ts-b1, ts-b2, ts-b3]\n  //          }\n  //          { name: \"Value\",\n  //            type: FieldType.number,\n  //            values: [b1, b2, b3]\n  //          }\n  //        ]\n  //       }\n  //    ]\n  // }\n  //\n  // The CM API response has the general form:\n  // items: {\n  //   timeSeries: [\n  //     {\n  //       metadata: {\n  //         metricName: \"metricName1\",\n  //         entityName: \"entityName1\",\n  //         ...\n  //       },\n  //       data: [\n  //         {\n  //           value: 45.1234,\n  //           timestamp: \"2015-10-02T12:58:24.009Z\",\n  //           ...\n  //         }, {\n  //           value: 98.7654,\n  //           timestamp: \"2015-10-02T12:59:24.009Z\",\n  //           ...\n  //         }\n  //         ... (more datapoints)\n  //       ]\n  //     }\n  //     ... (more timeseries)\n  //   ]\n  // }\n  convertResponse(response: any): DataFrame[] {\n    let frames: DataFrame[] = [];\n    (response.data.items).forEach((item: any) => {\n      (item.timeSeries).forEach((timeSeries: any) => {\n        const frame = new MutableDataFrame({\n          fields: [\n            {name: \"Time\", type: FieldType.time},\n            {name: \"Value\", type: FieldType.number},\n          ],\n        });\n        timeSeries.data.map((point: any) => {\n          frame.appendRow([point.timestamp, point.value]);\n        });\n        frame.name = this.makeTimeSeriesName(timeSeries.metadata);\n        frames.push(frame);\n      });\n    });\n    return frames;\n  }\n}\n","// Copyright 2015 Foursquare Labs, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// This file has been modified as part of migrating to React for compatibility with Grafana 9.\n// Modifications copyright (c) 2023 Cloudera, Inc.\n\nimport {DataSourcePlugin} from '@grafana/data';\nimport {ClouderaManagerDataSource} from './datasource';\nimport {ConfigEditor} from './components/ConfigEditor';\nimport {QueryEditor} from './components/QueryEditor';\nimport {ClouderaManagerQuery, ClouderaManagerDataSourceOptions} from './types';\n\nexport const plugin = new DataSourcePlugin<ClouderaManagerDataSource, ClouderaManagerQuery, ClouderaManagerDataSourceOptions>(ClouderaManagerDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, {useState} from 'react';\nimport {DataSourceHttpSettings, InlineLabel, Select} from '@grafana/ui';\nimport {DataSourcePluginOptionsEditorProps, SelectableValue} from '@grafana/data';\nimport {ClouderaManagerDataSourceOptions} from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ClouderaManagerDataSourceOptions> {\n}\n\nexport function ConfigEditor(props: Props) {\n  const {onOptionsChange, options} = props;\n\n  const [value, setValue] = useState<SelectableValue<number>>();\n  const cmVersionOptions = [\n    {label: 'v4-5', value: 0},\n    {label: 'v6-10', value: 1},\n    {label: 'v11+', value: 2},\n  ];\n\n  const onCmApiVersionChange = (value?: string) => {\n    const jsonData = {\n      ...options.jsonData,\n      cmApiVersion: value,\n    };\n    onOptionsChange({...options, jsonData});\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <DataSourceHttpSettings\n        defaultUrl={options.url}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n      />\n\n      <h5>Cloudera Manager Settings</h5>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <InlineLabel width={26}>\n            CM API Version\n          </InlineLabel>\n          <Select\n            width={40}\n            options={cmVersionOptions}\n            value={value}\n            onChange={(v) => {\n              setValue(v);\n              onCmApiVersionChange(v.label);\n            }}\n          />\n        </div>\n      </div>\n\n    </div>\n    // </>\n  );\n}\n","import React, {ChangeEvent} from 'react';\nimport {Input} from '@grafana/ui';\nimport {QueryEditorProps} from '@grafana/data';\nimport {ClouderaManagerDataSource} from '../datasource';\nimport {ClouderaManagerDataSourceOptions, ClouderaManagerQuery} from '../types';\n\ntype Props = QueryEditorProps<ClouderaManagerDataSource, ClouderaManagerQuery, ClouderaManagerDataSourceOptions>;\n\nexport function QueryEditor({query, onChange, onRunQuery}: Props) {\n  const onQueryTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({...query, queryText: event.target.value});\n    // executes the query\n    onRunQuery();\n  };\n\n  const {queryText} = query;\n\n  return (\n    <div className=\"gf-form\">\n      <Input name=\"query\" required onChange={onQueryTextChange} value={queryText || ''}/>\n    </div>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","ClouderaManagerDataSource","DataSourceApi","query","options","range","dataPromises","targets","filter","target","queryText","hide","map","requestOptions","url","this","apiVersion","getTemplateSrv","replace","scopedVars","from","toISOString","to","contentType","method","data","params","doRequest","then","response","items","convertResponse","Promise","all","values","concat","testDatasource","status","message","title","ok","test","basicAuth","headers","result","getBackendSrv","fetch","lastValueFrom","e","toPromise","makeTimeSeriesName","metadata","alias","metricName","entityName","frames","forEach","item","timeSeries","frame","MutableDataFrame","fields","name","type","FieldType","point","appendRow","timestamp","push","constructor","instanceSettings","super","jsonData","cmApiVersion","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","setValue","useState","div","className","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","onChange","h5","InlineLabel","width","Select","label","v","onCmApiVersionChange","setQueryEditor","onRunQuery","Input","required","event"],"sourceRoot":""}